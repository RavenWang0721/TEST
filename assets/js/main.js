import*as THREE from"https://unpkg.com/three@0.126.1/build/three.module.js";import{OrbitControls}from"https://unpkg.com/three@0.126.1/examples/jsm/controls/OrbitControls.js";import*as dat from"https://cdn.skypack.dev/dat.gui@0.7.7";const gui=new dat.GUI,settings={speed:.24,density:3.35,strength:.08,frequency:3.6,amplitude:1.4,intensity:10},folder1=gui.addFolder("Noise"),folder2=gui.addFolder("Rotation"),folder3=gui.addFolder("Color");folder1.add(settings,"speed",.1,1,.01),folder1.add(settings,"density",0,10,.01),folder1.add(settings,"strength",0,2,.01),folder2.add(settings,"frequency",0,10,.1),folder2.add(settings,"amplitude",0,10,.1),folder3.add(settings,"intensity",0,10,.1);const noise='\n  // GLSL textureless classic 3D noise "cnoise",\n  // with an RSL-style periodic variant "pnoise".\n  // Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n  // Version: 2011-10-11\n  //\n  // Many thanks to Ian McEwan of Ashima Arts for the\n  // ideas for permutation and gradient selection.\n  //\n  // Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n  // Distributed under the MIT license. See LICENSE file.\n  // https://github.com/ashima/webgl-noise\n  //\n\n  vec3 mod289(vec3 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 mod289(vec4 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 permute(vec4 x)\n  {\n    return mod289(((x*34.0)+1.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  // Classic Perlin noise, periodic variant\n  float pnoise(vec3 P, vec3 rep)\n  {\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n  }\n',rotation="\n  mat3 rotation3dY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat3(\n      c, 0.0, -s,\n      0.0, 1.0, 0.0,\n      s, 0.0, c\n    );\n  }\n  \n  vec3 rotateY(vec3 v, float angle) {\n    return rotation3dY(angle) * v;\n  }  \n",vertexShader=`  \n  varying vec2 vUv;\n  varying float vDistort;\n  \n  uniform float uTime;\n  uniform float uSpeed;\n  uniform float uNoiseDensity;\n  uniform float uNoiseStrength;\n  uniform float uFrequency;\n  uniform float uAmplitude;\n  \n  ${noise}\n  \n  ${rotation}\n  \n  void main() {\n    vUv = uv;\n    \n    float t = uTime * uSpeed;\n    float distortion = pnoise((normal + t) * uNoiseDensity, vec3(10.0)) * uNoiseStrength;\n\n    vec3 pos = position + (normal * distortion);\n    float angle = sin(uv.y * uFrequency + t) * uAmplitude;\n    pos = rotateY(pos, angle);    \n    \n    vDistort = distortion;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n  }  \n`,fragmentShader="\n  varying vec2 vUv;\n  varying float vDistort;\n  \n  uniform float uTime;\n  uniform float uIntensity;\n  \n  vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n  }     \n  \n  void main() {\n    float distort = vDistort * uIntensity;\n    \n    vec3 brightness = vec3(0.6, 0.15, 0.8);\n    vec3 contrast = vec3(0.5, 0.8, 0.1);\n    vec3 oscilation = vec3(1.0, 0.5, 0.3); //진동\n    vec3 phase = vec3(0.0, 0.1, 0.2);\n  \n    vec3 color = cosPalette(distort, brightness, contrast, oscilation, phase);\n    \n    gl_FragColor = vec4(color, 1.0);\n  }  \n";class Scene{constructor(){this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,1)),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setClearColor(16777215,0),this.camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(0,0,4),this.scene=new THREE.Scene,this.clock=new THREE.Clock,this.controls=new OrbitControls(this.camera,this.renderer.domElement),this.controls.enableZoom=!1,this.init(),this.animate()}init(){this.addCanvas(),this.addElements(),this.addEvents()}addCanvas(){const e=document.querySelector("#canvasContainer"),n=this.renderer.domElement;n.classList.add("webgl"),e.appendChild(n)}addElements(){const e=new THREE.IcosahedronBufferGeometry(1,64),n=new THREE.ShaderMaterial({vertexShader:vertexShader,fragmentShader:fragmentShader,uniforms:{uTime:{value:0},uSpeed:{value:settings.speed},uNoiseDensity:{value:settings.density},uNoiseStrength:{value:settings.strength},uFrequency:{value:settings.frequency},uAmplitude:{value:settings.amplitude},uIntensity:{value:settings.intensity}}});this.mesh=new THREE.Mesh(e,n),this.scene.add(this.mesh)}addEvents(){window.addEventListener("resize",this.resize.bind(this))}resize(){let e=window.innerWidth,n=window.innerHeight;this.renderer.domElement;this.camera.aspect=e/n,this.renderer.setSize(e,n),this.camera.updateProjectionMatrix()}animate(){requestAnimationFrame(this.animate.bind(this)),this.render()}render(){this.controls.update(),this.mesh.material.uniforms.uTime.value=this.clock.getElapsedTime(),this.mesh.material.uniforms.uSpeed.value=settings.speed,this.mesh.material.uniforms.uNoiseDensity.value=settings.density,this.mesh.material.uniforms.uNoiseStrength.value=settings.strength,this.mesh.material.uniforms.uFrequency.value=settings.frequency,this.mesh.material.uniforms.uAmplitude.value=settings.amplitude,this.mesh.material.uniforms.uIntensity.value=settings.intensity,this.renderer.render(this.scene,this.camera)}}new Scene;var scroller=".smooth-scroll";gsap.to(".main-flow-text",{xPercent:-38.7,ease:Power4.easeInOut,scrollTrigger:{trigger:".main-keyword",scroller:".smooth-scroll",scrub:1,start:"bottom bottom",end:"bottom top",pin:".main-keyword"}}),gsap.utils.toArray(".main-projects-item").forEach((function(e,n){gsap.from(e,{alpha:0,duration:2,yPercent:30,ease:Power4.easeInOut,scrollTrigger:{trigger:e,scroller:scroller,start:"top bottom",end:"top center",toggleActions:"restart none reverse none",scrub:1}})})),function(){var e=gsap.timeline({scrollTrigger:{trigger:".top-title",scroller:scroller,start:"top 90%",end:"top top",toggleActions:"restart none reverse none",scrub:1}});e.from(".top-title .tit > span",{alpha:0,yPercent:100,duration:2,ease:Power4.easeInOut,stagger:1}),e.from(".btn-arrow-right",{alpha:0,yPercent:-100,duration:2,ease:"Power4.easeInOut"},"-=2")}();